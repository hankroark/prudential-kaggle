library(h2o)
library(readr)
h2o.init(nthreads=-1)
categoricalVariables = c("Product_Info_1", "Product_Info_2", "Product_Info_3", "Product_Info_5", "Product_Info_6", "Product_Info_7",
"Employment_Info_2", "Employment_Info_3", "Employment_Info_5",
"InsuredInfo_1", "InsuredInfo_2", "InsuredInfo_3", "InsuredInfo_4", "InsuredInfo_5", "InsuredInfo_6", "InsuredInfo_7",
"Insurance_History_1", "Insurance_History_2", "Insurance_History_3", "Insurance_History_4", "Insurance_History_7",
"Insurance_History_8", "Insurance_History_9",
"Family_Hist_1", "Medical_History_2",
"Medical_History_3", "Medical_History_4", "Medical_History_5", "Medical_History_6", "Medical_History_7",
"Medical_History_8", "Medical_History_9", "Medical_History_10", "Medical_History_11", "Medical_History_12",
"Medical_History_13", "Medical_History_14", "Medical_History_16", "Medical_History_17", "Medical_History_18",
"Medical_History_19", "Medical_History_20", "Medical_History_21", "Medical_History_22", "Medical_History_23",
"Medical_History_25", "Medical_History_26", "Medical_History_27", "Medical_History_28", "Medical_History_29",
"Medical_History_30", "Medical_History_31", "Medical_History_33", "Medical_History_34", "Medical_History_35",
"Medical_History_36", "Medical_History_37", "Medical_History_38", "Medical_History_39", "Medical_History_40", "Medical_History_41")
specifiedTypes = rep("Enum", length(categoricalVariables))
cat("reading the train and test data\n")
trainlocal <- read_csv("../input/train.csv")
testlocal  <- read_csv("../input/test.csv")
setwd("~/Documents/github/prudential-kaggle/submissions")
trainlocal <- read_csv("../input/train.csv")
testlocal  <- read_csv("../input/test.csv")
cat("loading into h2o")
train <- as.h2o(trainlocal)
test <- as.h2o(testlocal)
independentVariables = names(train)[2:(ncol(train)-1)]
dependentVariable = names(train)[128]
h2oGbm <- h2o.gbm(x=independentVariables, y=dependentVariable, training_frame = train, nfold=5, model_id="default_gbm",
family="gaussian"
)
h2oGbm <- h2o.gbm(x=independentVariables, y=dependentVariable, training_frame = train, nfold=5, model_id="default_gbm",
distribution="gaussian"
)
frames <- h2o.splitFrame(train, ratios=0.7, seed=1)
training_frame <- frames[1]
training_frame <- frames[[1]]
validation_frame <- frames[[2]]
summary(training_frame)
gbm_grid <- h2o.grid("gbm", grid_id="grid_1",
x=independentVariables, y=dependentVariable, training_frame = train_frame, validation_frame = validation_frame, distribution="gaussian",
do_hyper_params_check=TRUE)
gbm_grid <- h2o.grid("gbm", grid_id="grid_1",
x=independentVariables, y=dependentVariable, training_frame = training_frame, validation_frame = validation_frame, distribution="gaussian",
do_hyper_params_check=TRUE)
gbm_grid <- h2o.grid("gbm", grid_id="grid_1",
x=independentVariables, y=dependentVariable, training_frame = training_frame, validation_frame = validation_frame, distribution="gaussian")
gbm_grid <- h2o.grid("gbm", grid_id="grid_1",
x=independentVariables, y=dependentVariable,
training_frame = training_frame, validation_frame = validation_frame, distribution="gaussian",
hyper_params = gbm_hyper_params)
gbm_hyper_params <- list(ntrees=c(100,300),
learn_rate=c(0.1,0.03),
max_depth=c(3,5,10),
min_rows=c(10,3,1),
col_sample_rate=c(1,0.7),
sample_rate=c(1,0.7))
gbm_grid <- h2o.grid("gbm", grid_id="grid_1",
x=independentVariables, y=dependentVariable,
training_frame = training_frame, validation_frame = validation_frame, distribution="gaussian",
hyper_params = gbm_hyper_params)
gbm_grid <- h2o.grid("gbm", grid_id="grid_2",
x=independentVariables, y=dependentVariable,
training_frame = training_frame, validation_frame = validation_frame, distribution="gaussian",
hyper_params = gbm_hyper_params)
gbm_grid <- h2o.grid("gbm", grid_id="grid_3",
x=independentVariables, y=dependentVariable,
training_frame = training_frame, validation_frame = validation_frame, distribution="gaussian", keep_cross_validation_predictions = TRUE,
hyper_params = gbm_hyper_params)
gbm_grid
summary(train)
h2o.shutdown()
setwd("~/Documents/github/prudential-kaggle/submissions")
# H2O Starter Script
library(h2o)
h2o.init(nthreads=-1)
categoricalVariables = c("Product_Info_1", "Product_Info_2", "Product_Info_3", "Product_Info_5", "Product_Info_6", "Product_Info_7",
"Employment_Info_2", "Employment_Info_3", "Employment_Info_5",
"InsuredInfo_1", "InsuredInfo_2", "InsuredInfo_3", "InsuredInfo_4", "InsuredInfo_5", "InsuredInfo_6", "InsuredInfo_7",
"Insurance_History_1", "Insurance_History_2", "Insurance_History_3", "Insurance_History_4", "Insurance_History_7",
"Insurance_History_8", "Insurance_History_9",
"Family_Hist_1", "Medical_History_2",
"Medical_History_3", "Medical_History_4", "Medical_History_5", "Medical_History_6", "Medical_History_7",
"Medical_History_8", "Medical_History_9", "Medical_History_10", "Medical_History_11", "Medical_History_12",
"Medical_History_13", "Medical_History_14", "Medical_History_16", "Medical_History_17", "Medical_History_18",
"Medical_History_19", "Medical_History_20", "Medical_History_21", "Medical_History_22", "Medical_History_23",
"Medical_History_25", "Medical_History_26", "Medical_History_27", "Medical_History_28", "Medical_History_29",
"Medical_History_30", "Medical_History_31", "Medical_History_33", "Medical_History_34", "Medical_History_35",
"Medical_History_36", "Medical_History_37", "Medical_History_38", "Medical_History_39", "Medical_History_40", "Medical_History_41")
specifiedTypes = rep("Enum", length(categoricalVariables))
cat("reading the train and test data\n")
train <- h2o.uploadFile("../input/train.csv", col.types=specifiedTypes)
train <- h2o.uploadFile("../input/train.csv")
test  <- h2o.uploadFile("../input/test.csv")
col.types=list(by.col.name=categoricalVariables,types=specifiedTypes)
train <- h2o.uploadFile("../input/train.csv", col.types=col.types)
test  <- h2o.uploadFile("../input/test.csv", col.types=col.types)
independentVariables = names(train)[2:(ncol(train)-1)]
dependentVariable = names(train)[128]
cat("creating model")
gbm_hyper_params <- list(ntrees=c(100,300),
learn_rate=c(0.1,0.03),
max_depth=c(3,5,10),
min_rows=c(10,3,1),
col_sample_rate=c(1,0.7),
sample_rate=c(1,0.7))
frames <- h2o.splitFrame(train, ratios=0.7, seed=1)
training_frame <- frames[[1]]
validation_frame <- frames[[2]]
gbm_grid <- h2o.grid("gbm", grid_id="grid_3",
x=independentVariables, y=dependentVariable,
training_frame = training_frame, validation_frame = validation_frame, distribution="gaussian", keep_cross_validation_predictions = TRUE,
hyper_params = gbm_hyper_params)
gbm_grid
showa(gbm_grid)
show(gbm_grid)
grid_models <- lapply(gbm_grid@model_ids, function(model_id) { model = h2o.getModel(model_id) })
amodel <- grid_models[[1]]
amodel@model$validation_metrics
amodel@model$validation_metrics@on_valid
amodel@model$validation_metrics@metrics
amodel@model$validation_metrics@metrics$mse
amodel@model$validation_metrics@metrics$MSE
for (i in 1:length(grid_models)) {
print(sprintf("validation mse: %f", grid_models[[i]]@model$validation_metrics@metrics$MSE))
}
best_mse <- 99999
for (i in 1:length(grid_models)) {
mse <- grid_models[[i]]@model$validation_metrics@metrics$MSE
if( mse < best_mse ) {
best_mse <- mse
best_model <- grid_models[[i]]
}
}
best_model
independentVariables
c(2:5, 9:10)
independentVariables2 = names(train)[c(2:38,40:(ncol(train)-1))]
gbm_grid4 <- h2o.grid("gbm", grid_id="grid_4",
x=independentVariables2, y=dependentVariable,
training_frame = training_frame, validation_frame = validation_frame, distribution="gaussian", keep_cross_validation_predictions = TRUE,
hyper_params = gbm_hyper_params)
independentVariables2
independentVariables2 = names(train)[c(2:37,39:(ncol(train)-1))]
independentVariables2 = names(train)[c(2:37,39:(ncol(train)-1))]
independentVariables2
independentVariables
names(train)
independentVariables2 = names(train)[c(2:39,41:(ncol(train)-1))]
independentVariables2
gbm_grid5 <- h2o.grid("gbm", grid_id="grid_5",
x=independentVariables2, y=dependentVariable,
training_frame = training_frame, validation_frame = validation_frame, distribution="gaussian", keep_cross_validation_predictions = TRUE,
hyper_params = gbm_hyper_params)
grid_models5 <- lapply(gbm_grid5@model_ids, function(model_id) { model = h2o.getModel(model_id) })
best_mse5 <- 99999
for (i in 1:length(grid_models5)) {
mse <- grid_models5[[i]]@model$validation_metrics@metrics$MSE
if( mse < best_mse5 ) {
best_mse5 <- mse
best_model5 <- grid_models[[i]]
}
}
best_model5
best_model
prediction <- as.data.frame( predict(best_model, test) )
submission <- as.data.frame(test$Id)
submission <- cbind(submission, round(prediction$predict))
names(submission) <- c("Id", "Response")
submission[submission$Response<1, "Response"] <- 1
submission[submission$Response>8, "Response"] <- 8
cat("saving the submission file\n")
write_csv(submission, "h2ogbm-4-12-v2.csv")
install.packages("psych")
library(psych)
5**2
rep(0, response_count**2)
response_count <- 5
rep(0, response_count**2)
weight_matrix <- matrix( rep(0, response_count**2), nrow = response_count, ncol=response_count )
weight_matrix
response_count <- 5
weight_matrix <- matrix( rep(0, response_count**2), nrow = response_count, ncol=response_count )
for( i in 1:response_count ) {
for( j in 1:response_count) {
if( i == j ) { value = 0 }
else { value = ((i-j)**2 / (response_count - 1)) }
weight_matrix[i, j] <- value
}
}
weight_matrix
wkappa( submission, w=weight_matrix )
